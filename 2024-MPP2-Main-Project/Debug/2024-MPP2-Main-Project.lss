
2024-MPP2-Main-Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000047a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000406  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000f  00800100  00800100  0000047a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000047a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004ac  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b8  00000000  00000000  000004ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a51  00000000  00000000  000005a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000085d  00000000  00000000  00000ff5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005c4  00000000  00000000  00001852  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000254  00000000  00000000  00001e18  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004d8  00000000  00000000  0000206c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000047f  00000000  00000000  00002544  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  000029c3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 99 00 	jmp	0x132	; 0x132 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 e0       	ldi	r30, 0x06	; 6
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 30       	cpi	r26, 0x00	; 0
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e0       	ldi	r26, 0x00	; 0
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	af 30       	cpi	r26, 0x0F	; 15
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 01 02 	jmp	0x402	; 0x402 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
*/
void test_function(void);


int main(void)
{
  a6:	cf 93       	push	r28
  a8:	df 93       	push	r29
  aa:	cd b7       	in	r28, 0x3d	; 61
  ac:	de b7       	in	r29, 0x3e	; 62
	DDRD = 0b11110000;
  ae:	8a e2       	ldi	r24, 0x2A	; 42
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	20 ef       	ldi	r18, 0xF0	; 240
  b4:	fc 01       	movw	r30, r24
  b6:	20 83       	st	Z, r18
	
	My_Init_TIM1();
  b8:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <My_Init_TIM1>
    My_TIM_Start(TIM1,TIM1_PRESCALER_FACTOR_1024);
  bc:	65 e0       	ldi	r22, 0x05	; 5
  be:	81 e0       	ldi	r24, 0x01	; 1
  c0:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <My_TIM_Start>
	
	My_Init_USART();
  c4:	0e 94 4f 01 	call	0x29e	; 0x29e <My_Init_USART>

	
	sei();
  c8:	78 94       	sei
	
    while (1) 
    {
		test_function();
  ca:	0e 94 68 00 	call	0xd0	; 0xd0 <test_function>
    }
  ce:	fd cf       	rjmp	.-6      	; 0xca <main+0x24>

000000d0 <test_function>:
}

void test_function()
{
  d0:	cf 93       	push	r28
  d2:	df 93       	push	r29
  d4:	00 d0       	rcall	.+0      	; 0xd6 <test_function+0x6>
  d6:	cd b7       	in	r28, 0x3d	; 61
  d8:	de b7       	in	r29, 0x3e	; 62
	for(int i = 0; i < 10;i++)
  da:	1a 82       	std	Y+2, r1	; 0x02
  dc:	19 82       	std	Y+1, r1	; 0x01
  de:	0c c0       	rjmp	.+24     	; 0xf8 <test_function+0x28>
	{
		PORTD = i << 4;
  e0:	8b e2       	ldi	r24, 0x2B	; 43
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	29 81       	ldd	r18, Y+1	; 0x01
  e6:	22 95       	swap	r18
  e8:	20 7f       	andi	r18, 0xF0	; 240
  ea:	fc 01       	movw	r30, r24
  ec:	20 83       	st	Z, r18
    }
}

void test_function()
{
	for(int i = 0; i < 10;i++)
  ee:	89 81       	ldd	r24, Y+1	; 0x01
  f0:	9a 81       	ldd	r25, Y+2	; 0x02
  f2:	01 96       	adiw	r24, 0x01	; 1
  f4:	9a 83       	std	Y+2, r25	; 0x02
  f6:	89 83       	std	Y+1, r24	; 0x01
  f8:	89 81       	ldd	r24, Y+1	; 0x01
  fa:	9a 81       	ldd	r25, Y+2	; 0x02
  fc:	0a 97       	sbiw	r24, 0x0a	; 10
  fe:	84 f3       	brlt	.-32     	; 0xe0 <test_function+0x10>
	{
		PORTD = i << 4;
	}
	
}
 100:	00 00       	nop
 102:	0f 90       	pop	r0
 104:	0f 90       	pop	r0
 106:	df 91       	pop	r29
 108:	cf 91       	pop	r28
 10a:	08 95       	ret

0000010c <__vector_11>:


ISR(TIMER1_COMPA_vect)
{
 10c:	1f 92       	push	r1
 10e:	0f 92       	push	r0
 110:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
 114:	0f 92       	push	r0
 116:	11 24       	eor	r1, r1
 118:	cf 93       	push	r28
 11a:	df 93       	push	r29
 11c:	cd b7       	in	r28, 0x3d	; 61
 11e:	de b7       	in	r29, 0x3e	; 62

	
	My_USART0_TransmitByte(data_to_send);
	PORTB ^= (1 << PORTB5);
	*/
}
 120:	00 00       	nop
 122:	df 91       	pop	r29
 124:	cf 91       	pop	r28
 126:	0f 90       	pop	r0
 128:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
 12c:	0f 90       	pop	r0
 12e:	1f 90       	pop	r1
 130:	18 95       	reti

00000132 <__vector_18>:

ISR(USART_RX_vect)
{
 132:	1f 92       	push	r1
 134:	0f 92       	push	r0
 136:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
 13a:	0f 92       	push	r0
 13c:	11 24       	eor	r1, r1
 13e:	2f 93       	push	r18
 140:	3f 93       	push	r19
 142:	4f 93       	push	r20
 144:	5f 93       	push	r21
 146:	6f 93       	push	r22
 148:	7f 93       	push	r23
 14a:	8f 93       	push	r24
 14c:	9f 93       	push	r25
 14e:	af 93       	push	r26
 150:	bf 93       	push	r27
 152:	ef 93       	push	r30
 154:	ff 93       	push	r31
 156:	cf 93       	push	r28
 158:	df 93       	push	r29
 15a:	cd b7       	in	r28, 0x3d	; 61
 15c:	de b7       	in	r29, 0x3e	; 62
	//data = My_USART0_ReciveByte();
	My_USART0_ReciveString(data_buffer, USART_Buffer_lenght);
 15e:	68 e0       	ldi	r22, 0x08	; 8
 160:	70 e0       	ldi	r23, 0x00	; 0
 162:	87 e0       	ldi	r24, 0x07	; 7
 164:	91 e0       	ldi	r25, 0x01	; 1
 166:	0e 94 91 01 	call	0x322	; 0x322 <My_USART0_ReciveString>
	

	
	PORTB ^= (1 << PORTB5);
 16a:	85 e2       	ldi	r24, 0x25	; 37
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	25 e2       	ldi	r18, 0x25	; 37
 170:	30 e0       	ldi	r19, 0x00	; 0
 172:	f9 01       	movw	r30, r18
 174:	30 81       	ld	r19, Z
 176:	20 e2       	ldi	r18, 0x20	; 32
 178:	23 27       	eor	r18, r19
 17a:	fc 01       	movw	r30, r24
 17c:	20 83       	st	Z, r18
 17e:	00 00       	nop
 180:	df 91       	pop	r29
 182:	cf 91       	pop	r28
 184:	ff 91       	pop	r31
 186:	ef 91       	pop	r30
 188:	bf 91       	pop	r27
 18a:	af 91       	pop	r26
 18c:	9f 91       	pop	r25
 18e:	8f 91       	pop	r24
 190:	7f 91       	pop	r23
 192:	6f 91       	pop	r22
 194:	5f 91       	pop	r21
 196:	4f 91       	pop	r20
 198:	3f 91       	pop	r19
 19a:	2f 91       	pop	r18
 19c:	0f 90       	pop	r0
 19e:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
 1a2:	0f 90       	pop	r0
 1a4:	1f 90       	pop	r1
 1a6:	18 95       	reti

000001a8 <My_Init_TIM1>:
 * TIM2 izmanto hronomemetra un funkcionalit?tes nodrošin?šanai
*/
void My_Init_TIM2()
{
	
}
 1a8:	cf 93       	push	r28
 1aa:	df 93       	push	r29
 1ac:	cd b7       	in	r28, 0x3d	; 61
 1ae:	de b7       	in	r29, 0x3e	; 62
 1b0:	84 e8       	ldi	r24, 0x84	; 132
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	fc 01       	movw	r30, r24
 1b6:	11 82       	std	Z+1, r1	; 0x01
 1b8:	10 82       	st	Z, r1
 1ba:	88 e8       	ldi	r24, 0x88	; 136
 1bc:	90 e0       	ldi	r25, 0x00	; 0
 1be:	29 e0       	ldi	r18, 0x09	; 9
 1c0:	3d e3       	ldi	r19, 0x3D	; 61
 1c2:	fc 01       	movw	r30, r24
 1c4:	31 83       	std	Z+1, r19	; 0x01
 1c6:	20 83       	st	Z, r18
 1c8:	81 e8       	ldi	r24, 0x81	; 129
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	21 e8       	ldi	r18, 0x81	; 129
 1ce:	30 e0       	ldi	r19, 0x00	; 0
 1d0:	f9 01       	movw	r30, r18
 1d2:	20 81       	ld	r18, Z
 1d4:	28 60       	ori	r18, 0x08	; 8
 1d6:	fc 01       	movw	r30, r24
 1d8:	20 83       	st	Z, r18
 1da:	8f e6       	ldi	r24, 0x6F	; 111
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	2f e6       	ldi	r18, 0x6F	; 111
 1e0:	30 e0       	ldi	r19, 0x00	; 0
 1e2:	f9 01       	movw	r30, r18
 1e4:	20 81       	ld	r18, Z
 1e6:	22 60       	ori	r18, 0x02	; 2
 1e8:	fc 01       	movw	r30, r24
 1ea:	20 83       	st	Z, r18
 1ec:	00 00       	nop
 1ee:	df 91       	pop	r29
 1f0:	cf 91       	pop	r28
 1f2:	08 95       	ret

000001f4 <My_TIM_Start>:
 *
 * @param tim_name			taimera skaitit?ja nosaukums
 * @param prescailer_value  Dalit?ja 
*/
void My_TIM_Start(uint8_t tim_name, uint8_t prescailer_value)
{
 1f4:	cf 93       	push	r28
 1f6:	df 93       	push	r29
 1f8:	00 d0       	rcall	.+0      	; 0x1fa <My_TIM_Start+0x6>
 1fa:	cd b7       	in	r28, 0x3d	; 61
 1fc:	de b7       	in	r29, 0x3e	; 62
 1fe:	89 83       	std	Y+1, r24	; 0x01
 200:	6a 83       	std	Y+2, r22	; 0x02
	switch (tim_name)
 202:	89 81       	ldd	r24, Y+1	; 0x01
 204:	88 2f       	mov	r24, r24
 206:	90 e0       	ldi	r25, 0x00	; 0
 208:	81 30       	cpi	r24, 0x01	; 1
 20a:	91 05       	cpc	r25, r1
 20c:	d1 f0       	breq	.+52     	; 0x242 <My_TIM_Start+0x4e>
 20e:	82 30       	cpi	r24, 0x02	; 2
 210:	91 05       	cpc	r25, r1
 212:	59 f1       	breq	.+86     	; 0x26a <My_TIM_Start+0x76>
 214:	89 2b       	or	r24, r25
 216:	09 f0       	breq	.+2      	; 0x21a <My_TIM_Start+0x26>
			TCCR2B &= 0xF8;
			TCCR2B |= prescailer_value;
		break;
		
		default:
		break;
 218:	3c c0       	rjmp	.+120    	; 0x292 <My_TIM_Start+0x9e>
void My_TIM_Start(uint8_t tim_name, uint8_t prescailer_value)
{
	switch (tim_name)
	{
		case TIM0:
			TCCR0B &= 0xF8;
 21a:	85 e4       	ldi	r24, 0x45	; 69
 21c:	90 e0       	ldi	r25, 0x00	; 0
 21e:	25 e4       	ldi	r18, 0x45	; 69
 220:	30 e0       	ldi	r19, 0x00	; 0
 222:	f9 01       	movw	r30, r18
 224:	20 81       	ld	r18, Z
 226:	28 7f       	andi	r18, 0xF8	; 248
 228:	fc 01       	movw	r30, r24
 22a:	20 83       	st	Z, r18
			TCCR0B |= prescailer_value;
 22c:	85 e4       	ldi	r24, 0x45	; 69
 22e:	90 e0       	ldi	r25, 0x00	; 0
 230:	25 e4       	ldi	r18, 0x45	; 69
 232:	30 e0       	ldi	r19, 0x00	; 0
 234:	f9 01       	movw	r30, r18
 236:	30 81       	ld	r19, Z
 238:	2a 81       	ldd	r18, Y+2	; 0x02
 23a:	23 2b       	or	r18, r19
 23c:	fc 01       	movw	r30, r24
 23e:	20 83       	st	Z, r18
		break;
 240:	28 c0       	rjmp	.+80     	; 0x292 <My_TIM_Start+0x9e>
		
		case TIM1:
			TCCR1B &= 0xF8;
 242:	81 e8       	ldi	r24, 0x81	; 129
 244:	90 e0       	ldi	r25, 0x00	; 0
 246:	21 e8       	ldi	r18, 0x81	; 129
 248:	30 e0       	ldi	r19, 0x00	; 0
 24a:	f9 01       	movw	r30, r18
 24c:	20 81       	ld	r18, Z
 24e:	28 7f       	andi	r18, 0xF8	; 248
 250:	fc 01       	movw	r30, r24
 252:	20 83       	st	Z, r18
			TCCR1B |= prescailer_value;
 254:	81 e8       	ldi	r24, 0x81	; 129
 256:	90 e0       	ldi	r25, 0x00	; 0
 258:	21 e8       	ldi	r18, 0x81	; 129
 25a:	30 e0       	ldi	r19, 0x00	; 0
 25c:	f9 01       	movw	r30, r18
 25e:	30 81       	ld	r19, Z
 260:	2a 81       	ldd	r18, Y+2	; 0x02
 262:	23 2b       	or	r18, r19
 264:	fc 01       	movw	r30, r24
 266:	20 83       	st	Z, r18
		break;
 268:	14 c0       	rjmp	.+40     	; 0x292 <My_TIM_Start+0x9e>
		
		case TIM2:
			TCCR2B &= 0xF8;
 26a:	81 eb       	ldi	r24, 0xB1	; 177
 26c:	90 e0       	ldi	r25, 0x00	; 0
 26e:	21 eb       	ldi	r18, 0xB1	; 177
 270:	30 e0       	ldi	r19, 0x00	; 0
 272:	f9 01       	movw	r30, r18
 274:	20 81       	ld	r18, Z
 276:	28 7f       	andi	r18, 0xF8	; 248
 278:	fc 01       	movw	r30, r24
 27a:	20 83       	st	Z, r18
			TCCR2B |= prescailer_value;
 27c:	81 eb       	ldi	r24, 0xB1	; 177
 27e:	90 e0       	ldi	r25, 0x00	; 0
 280:	21 eb       	ldi	r18, 0xB1	; 177
 282:	30 e0       	ldi	r19, 0x00	; 0
 284:	f9 01       	movw	r30, r18
 286:	30 81       	ld	r19, Z
 288:	2a 81       	ldd	r18, Y+2	; 0x02
 28a:	23 2b       	or	r18, r19
 28c:	fc 01       	movw	r30, r24
 28e:	20 83       	st	Z, r18
		break;
 290:	00 00       	nop
		
		default:
		break;
	}
}
 292:	00 00       	nop
 294:	0f 90       	pop	r0
 296:	0f 90       	pop	r0
 298:	df 91       	pop	r29
 29a:	cf 91       	pop	r28
 29c:	08 95       	ret

0000029e <My_Init_USART>:
void My_USART0_TransmitByte(uint8_t symbol)
{
	// if transmitter buffer !empty -> write data in symbol
	while(!(UCSR0A) & (1 << UDRE0));
	UDR0 = symbol;
}
 29e:	cf 93       	push	r28
 2a0:	df 93       	push	r29
 2a2:	cd b7       	in	r28, 0x3d	; 61
 2a4:	de b7       	in	r29, 0x3e	; 62
 2a6:	84 ec       	ldi	r24, 0xC4	; 196
 2a8:	90 e0       	ldi	r25, 0x00	; 0
 2aa:	27 e6       	ldi	r18, 0x67	; 103
 2ac:	30 e0       	ldi	r19, 0x00	; 0
 2ae:	fc 01       	movw	r30, r24
 2b0:	31 83       	std	Z+1, r19	; 0x01
 2b2:	20 83       	st	Z, r18
 2b4:	81 ec       	ldi	r24, 0xC1	; 193
 2b6:	90 e0       	ldi	r25, 0x00	; 0
 2b8:	28 e9       	ldi	r18, 0x98	; 152
 2ba:	fc 01       	movw	r30, r24
 2bc:	20 83       	st	Z, r18
 2be:	82 ec       	ldi	r24, 0xC2	; 194
 2c0:	90 e0       	ldi	r25, 0x00	; 0
 2c2:	26 e0       	ldi	r18, 0x06	; 6
 2c4:	fc 01       	movw	r30, r24
 2c6:	20 83       	st	Z, r18
 2c8:	00 00       	nop
 2ca:	df 91       	pop	r29
 2cc:	cf 91       	pop	r28
 2ce:	08 95       	ret

000002d0 <My_USART0_ReciveByte>:

uint8_t My_USART0_ReciveByte()
{
 2d0:	cf 93       	push	r28
 2d2:	df 93       	push	r29
 2d4:	1f 92       	push	r1
 2d6:	cd b7       	in	r28, 0x3d	; 61
 2d8:	de b7       	in	r29, 0x3e	; 62
	uint8_t data = UDR0;
 2da:	86 ec       	ldi	r24, 0xC6	; 198
 2dc:	90 e0       	ldi	r25, 0x00	; 0
 2de:	fc 01       	movw	r30, r24
 2e0:	80 81       	ld	r24, Z
 2e2:	89 83       	std	Y+1, r24	; 0x01
	return data;
 2e4:	89 81       	ldd	r24, Y+1	; 0x01
}
 2e6:	0f 90       	pop	r0
 2e8:	df 91       	pop	r29
 2ea:	cf 91       	pop	r28
 2ec:	08 95       	ret

000002ee <My_USART0_CheckString>:

int My_USART0_CheckString(uint8_t checkChar, uint8_t position, uint8_t buffer_len)
{
 2ee:	cf 93       	push	r28
 2f0:	df 93       	push	r29
 2f2:	00 d0       	rcall	.+0      	; 0x2f4 <My_USART0_CheckString+0x6>
 2f4:	1f 92       	push	r1
 2f6:	cd b7       	in	r28, 0x3d	; 61
 2f8:	de b7       	in	r29, 0x3e	; 62
 2fa:	89 83       	std	Y+1, r24	; 0x01
 2fc:	6a 83       	std	Y+2, r22	; 0x02
 2fe:	4b 83       	std	Y+3, r20	; 0x03
	// check < in the begining
	if(position == 0 && checkChar == '<')
 300:	8a 81       	ldd	r24, Y+2	; 0x02
 302:	88 23       	and	r24, r24
 304:	31 f4       	brne	.+12     	; 0x312 <My_USART0_CheckString+0x24>
 306:	89 81       	ldd	r24, Y+1	; 0x01
 308:	8c 33       	cpi	r24, 0x3C	; 60
 30a:	19 f4       	brne	.+6      	; 0x312 <My_USART0_CheckString+0x24>
	{
		return 1;
 30c:	81 e0       	ldi	r24, 0x01	; 1
 30e:	90 e0       	ldi	r25, 0x00	; 0
 310:	02 c0       	rjmp	.+4      	; 0x316 <My_USART0_CheckString+0x28>
	}
	else 
	{
		return 0;
 312:	80 e0       	ldi	r24, 0x00	; 0
 314:	90 e0       	ldi	r25, 0x00	; 0
	}
	else
	{
		return 0;
	}
}
 316:	0f 90       	pop	r0
 318:	0f 90       	pop	r0
 31a:	0f 90       	pop	r0
 31c:	df 91       	pop	r29
 31e:	cf 91       	pop	r28
 320:	08 95       	ret

00000322 <My_USART0_ReciveString>:

uint8_t My_USART0_ReciveString(uint8_t *data_arr, uint8_t lenght)
{
 322:	0f 93       	push	r16
 324:	1f 93       	push	r17
 326:	cf 93       	push	r28
 328:	df 93       	push	r29
 32a:	00 d0       	rcall	.+0      	; 0x32c <My_USART0_ReciveString+0xa>
 32c:	1f 92       	push	r1
 32e:	cd b7       	in	r28, 0x3d	; 61
 330:	de b7       	in	r29, 0x3e	; 62
 332:	9a 83       	std	Y+2, r25	; 0x02
 334:	89 83       	std	Y+1, r24	; 0x01
 336:	6b 83       	std	Y+3, r22	; 0x03
	static int i = 0;
	data_arr[i] = My_USART0_ReciveByte();
 338:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 33c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 340:	9c 01       	movw	r18, r24
 342:	89 81       	ldd	r24, Y+1	; 0x01
 344:	9a 81       	ldd	r25, Y+2	; 0x02
 346:	8c 01       	movw	r16, r24
 348:	02 0f       	add	r16, r18
 34a:	13 1f       	adc	r17, r19
 34c:	0e 94 68 01 	call	0x2d0	; 0x2d0 <My_USART0_ReciveByte>
 350:	f8 01       	movw	r30, r16
 352:	80 83       	st	Z, r24
	
	if(i == 0)
 354:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 358:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 35c:	89 2b       	or	r24, r25
 35e:	c9 f4       	brne	.+50     	; 0x392 <My_USART0_ReciveString+0x70>
	{
		if(My_USART0_CheckString(data_arr[0],i,lenght) == 1)
 360:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 364:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 368:	28 2f       	mov	r18, r24
 36a:	89 81       	ldd	r24, Y+1	; 0x01
 36c:	9a 81       	ldd	r25, Y+2	; 0x02
 36e:	fc 01       	movw	r30, r24
 370:	80 81       	ld	r24, Z
 372:	4b 81       	ldd	r20, Y+3	; 0x03
 374:	62 2f       	mov	r22, r18
 376:	0e 94 77 01 	call	0x2ee	; 0x2ee <My_USART0_CheckString>
 37a:	01 97       	sbiw	r24, 0x01	; 1
 37c:	99 f4       	brne	.+38     	; 0x3a4 <My_USART0_ReciveString+0x82>
		{
			i++;
 37e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 382:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 386:	01 96       	adiw	r24, 0x01	; 1
 388:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 38c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 390:	09 c0       	rjmp	.+18     	; 0x3a4 <My_USART0_ReciveString+0x82>
		}
		
	}
	else 
	{
		i++;
 392:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 396:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 39a:	01 96       	adiw	r24, 0x01	; 1
 39c:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 3a0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	}
	
	if(i == lenght-1)
 3a4:	8b 81       	ldd	r24, Y+3	; 0x03
 3a6:	88 2f       	mov	r24, r24
 3a8:	90 e0       	ldi	r25, 0x00	; 0
 3aa:	9c 01       	movw	r18, r24
 3ac:	21 50       	subi	r18, 0x01	; 1
 3ae:	31 09       	sbc	r19, r1
 3b0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 3b4:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 3b8:	28 17       	cp	r18, r24
 3ba:	39 07       	cpc	r19, r25
 3bc:	c9 f4       	brne	.+50     	; 0x3f0 <My_USART0_ReciveString+0xce>
	{
		if(My_USART0_CheckString(data_arr[lenght-1],i,lenght) == 1)
 3be:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 3c2:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 3c6:	58 2f       	mov	r21, r24
 3c8:	8b 81       	ldd	r24, Y+3	; 0x03
 3ca:	88 2f       	mov	r24, r24
 3cc:	90 e0       	ldi	r25, 0x00	; 0
 3ce:	01 97       	sbiw	r24, 0x01	; 1
 3d0:	29 81       	ldd	r18, Y+1	; 0x01
 3d2:	3a 81       	ldd	r19, Y+2	; 0x02
 3d4:	82 0f       	add	r24, r18
 3d6:	93 1f       	adc	r25, r19
 3d8:	fc 01       	movw	r30, r24
 3da:	80 81       	ld	r24, Z
 3dc:	4b 81       	ldd	r20, Y+3	; 0x03
 3de:	65 2f       	mov	r22, r21
 3e0:	0e 94 77 01 	call	0x2ee	; 0x2ee <My_USART0_CheckString>
 3e4:	01 97       	sbiw	r24, 0x01	; 1
 3e6:	21 f4       	brne	.+8      	; 0x3f0 <My_USART0_ReciveString+0xce>
		{
			i = 0;
 3e8:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 3ec:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
		}
		
	}

	
}
 3f0:	00 00       	nop
 3f2:	0f 90       	pop	r0
 3f4:	0f 90       	pop	r0
 3f6:	0f 90       	pop	r0
 3f8:	df 91       	pop	r29
 3fa:	cf 91       	pop	r28
 3fc:	1f 91       	pop	r17
 3fe:	0f 91       	pop	r16
 400:	08 95       	ret

00000402 <_exit>:
 402:	f8 94       	cli

00000404 <__stop_program>:
 404:	ff cf       	rjmp	.-2      	; 0x404 <__stop_program>
