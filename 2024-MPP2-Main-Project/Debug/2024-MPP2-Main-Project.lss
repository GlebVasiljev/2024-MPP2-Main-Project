
2024-MPP2-Main-Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000047e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000040a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000011  00800100  00800100  0000047e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000047e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004b0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c0  00000000  00000000  000004f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a6b  00000000  00000000  000005b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000854  00000000  00000000  0000101b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005cf  00000000  00000000  0000186f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000288  00000000  00000000  00001e40  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000537  00000000  00000000  000020c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004e1  00000000  00000000  000025ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  00002ae0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__vector_15>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 9e 00 	jmp	0x13c	; 0x13c <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e0       	ldi	r30, 0x0A	; 10
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 30       	cpi	r26, 0x00	; 0
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e0       	ldi	r26, 0x00	; 0
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a1 31       	cpi	r26, 0x11	; 17
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 03 02 	jmp	0x406	; 0x406 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:

void test_function()
{
	
	
}
  a6:	cf 93       	push	r28
  a8:	df 93       	push	r29
  aa:	cd b7       	in	r28, 0x3d	; 61
  ac:	de b7       	in	r29, 0x3e	; 62
  ae:	8a e2       	ldi	r24, 0x2A	; 42
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	20 ef       	ldi	r18, 0xF0	; 240
  b4:	fc 01       	movw	r30, r24
  b6:	20 83       	st	Z, r18
  b8:	84 e2       	ldi	r24, 0x24	; 36
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	2f e0       	ldi	r18, 0x0F	; 15
  be:	fc 01       	movw	r30, r24
  c0:	20 83       	st	Z, r18
  c2:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <My_Init_TIM0>
  c6:	63 e0       	ldi	r22, 0x03	; 3
  c8:	80 e0       	ldi	r24, 0x00	; 0
  ca:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <My_TIM_Start>
  ce:	0e 94 51 01 	call	0x2a2	; 0x2a2 <My_Init_USART>
  d2:	78 94       	sei
  d4:	ff cf       	rjmp	.-2      	; 0xd4 <main+0x2e>

000000d6 <__vector_15>:

// Timer B
ISR(TIMER0_COMPB_vect)
{
  d6:	1f 92       	push	r1
  d8:	0f 92       	push	r0
  da:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
  de:	0f 92       	push	r0
  e0:	11 24       	eor	r1, r1
  e2:	8f 93       	push	r24
  e4:	9f 93       	push	r25
  e6:	cf 93       	push	r28
  e8:	df 93       	push	r29
  ea:	cd b7       	in	r28, 0x3d	; 61
  ec:	de b7       	in	r29, 0x3e	; 62
	}
	
	PORTD = digit << 4;
	PORTB = cathode; */
	static uint16_t x = 0;
	x++;
  ee:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_end>
  f2:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_end+0x1>
  f6:	01 96       	adiw	r24, 0x01	; 1
  f8:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_end+0x1>
  fc:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_end>
	
}
 100:	00 00       	nop
 102:	df 91       	pop	r29
 104:	cf 91       	pop	r28
 106:	9f 91       	pop	r25
 108:	8f 91       	pop	r24
 10a:	0f 90       	pop	r0
 10c:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
 110:	0f 90       	pop	r0
 112:	1f 90       	pop	r1
 114:	18 95       	reti

00000116 <__vector_11>:

ISR(TIMER1_COMPA_vect)
{
 116:	1f 92       	push	r1
 118:	0f 92       	push	r0
 11a:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
 11e:	0f 92       	push	r0
 120:	11 24       	eor	r1, r1
 122:	cf 93       	push	r28
 124:	df 93       	push	r29
 126:	cd b7       	in	r28, 0x3d	; 61
 128:	de b7       	in	r29, 0x3e	; 62

	
	My_USART0_TransmitByte(data_to_send);
	PORTB ^= (1 << PORTB5);
	*/
}
 12a:	00 00       	nop
 12c:	df 91       	pop	r29
 12e:	cf 91       	pop	r28
 130:	0f 90       	pop	r0
 132:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
 136:	0f 90       	pop	r0
 138:	1f 90       	pop	r1
 13a:	18 95       	reti

0000013c <__vector_18>:

ISR(USART_RX_vect)
{
 13c:	1f 92       	push	r1
 13e:	0f 92       	push	r0
 140:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
 144:	0f 92       	push	r0
 146:	11 24       	eor	r1, r1
 148:	2f 93       	push	r18
 14a:	3f 93       	push	r19
 14c:	4f 93       	push	r20
 14e:	5f 93       	push	r21
 150:	6f 93       	push	r22
 152:	7f 93       	push	r23
 154:	8f 93       	push	r24
 156:	9f 93       	push	r25
 158:	af 93       	push	r26
 15a:	bf 93       	push	r27
 15c:	ef 93       	push	r30
 15e:	ff 93       	push	r31
 160:	cf 93       	push	r28
 162:	df 93       	push	r29
 164:	cd b7       	in	r28, 0x3d	; 61
 166:	de b7       	in	r29, 0x3e	; 62
	//data = My_USART0_ReciveByte();
	My_USART0_ReciveString(data_buffer, USART_Buffer_lenght);
 168:	68 e0       	ldi	r22, 0x08	; 8
 16a:	70 e0       	ldi	r23, 0x00	; 0
 16c:	89 e0       	ldi	r24, 0x09	; 9
 16e:	91 e0       	ldi	r25, 0x01	; 1
 170:	0e 94 93 01 	call	0x326	; 0x326 <My_USART0_ReciveString>
	

	
	PORTB ^= (1 << PORTB5);
 174:	85 e2       	ldi	r24, 0x25	; 37
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	25 e2       	ldi	r18, 0x25	; 37
 17a:	30 e0       	ldi	r19, 0x00	; 0
 17c:	f9 01       	movw	r30, r18
 17e:	30 81       	ld	r19, Z
 180:	20 e2       	ldi	r18, 0x20	; 32
 182:	23 27       	eor	r18, r19
 184:	fc 01       	movw	r30, r24
 186:	20 83       	st	Z, r18
 188:	00 00       	nop
 18a:	df 91       	pop	r29
 18c:	cf 91       	pop	r28
 18e:	ff 91       	pop	r31
 190:	ef 91       	pop	r30
 192:	bf 91       	pop	r27
 194:	af 91       	pop	r26
 196:	9f 91       	pop	r25
 198:	8f 91       	pop	r24
 19a:	7f 91       	pop	r23
 19c:	6f 91       	pop	r22
 19e:	5f 91       	pop	r21
 1a0:	4f 91       	pop	r20
 1a2:	3f 91       	pop	r19
 1a4:	2f 91       	pop	r18
 1a6:	0f 90       	pop	r0
 1a8:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
 1ac:	0f 90       	pop	r0
 1ae:	1f 90       	pop	r1
 1b0:	18 95       	reti

000001b2 <My_Init_TIM0>:
 * TIM2 izmanto hronomemetra un funkcionalit?tes nodrošin?šanai
*/
void My_Init_TIM2()
{
	
}
 1b2:	cf 93       	push	r28
 1b4:	df 93       	push	r29
 1b6:	cd b7       	in	r28, 0x3d	; 61
 1b8:	de b7       	in	r29, 0x3e	; 62
 1ba:	86 e4       	ldi	r24, 0x46	; 70
 1bc:	90 e0       	ldi	r25, 0x00	; 0
 1be:	fc 01       	movw	r30, r24
 1c0:	10 82       	st	Z, r1
 1c2:	88 e4       	ldi	r24, 0x48	; 72
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	2a ef       	ldi	r18, 0xFA	; 250
 1c8:	fc 01       	movw	r30, r24
 1ca:	20 83       	st	Z, r18
 1cc:	84 e4       	ldi	r24, 0x44	; 68
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	24 e4       	ldi	r18, 0x44	; 68
 1d2:	30 e0       	ldi	r19, 0x00	; 0
 1d4:	f9 01       	movw	r30, r18
 1d6:	20 81       	ld	r18, Z
 1d8:	22 60       	ori	r18, 0x02	; 2
 1da:	fc 01       	movw	r30, r24
 1dc:	20 83       	st	Z, r18
 1de:	8e e6       	ldi	r24, 0x6E	; 110
 1e0:	90 e0       	ldi	r25, 0x00	; 0
 1e2:	2e e6       	ldi	r18, 0x6E	; 110
 1e4:	30 e0       	ldi	r19, 0x00	; 0
 1e6:	f9 01       	movw	r30, r18
 1e8:	20 81       	ld	r18, Z
 1ea:	24 60       	ori	r18, 0x04	; 4
 1ec:	fc 01       	movw	r30, r24
 1ee:	20 83       	st	Z, r18
 1f0:	00 00       	nop
 1f2:	df 91       	pop	r29
 1f4:	cf 91       	pop	r28
 1f6:	08 95       	ret

000001f8 <My_TIM_Start>:
 *
 * @param tim_name			taimera skaitit?ja nosaukums
 * @param prescailer_value  Dalit?ja 
*/
void My_TIM_Start(uint8_t tim_name, uint8_t prescailer_value)
{
 1f8:	cf 93       	push	r28
 1fa:	df 93       	push	r29
 1fc:	00 d0       	rcall	.+0      	; 0x1fe <My_TIM_Start+0x6>
 1fe:	cd b7       	in	r28, 0x3d	; 61
 200:	de b7       	in	r29, 0x3e	; 62
 202:	89 83       	std	Y+1, r24	; 0x01
 204:	6a 83       	std	Y+2, r22	; 0x02
	switch (tim_name)
 206:	89 81       	ldd	r24, Y+1	; 0x01
 208:	88 2f       	mov	r24, r24
 20a:	90 e0       	ldi	r25, 0x00	; 0
 20c:	81 30       	cpi	r24, 0x01	; 1
 20e:	91 05       	cpc	r25, r1
 210:	d1 f0       	breq	.+52     	; 0x246 <My_TIM_Start+0x4e>
 212:	82 30       	cpi	r24, 0x02	; 2
 214:	91 05       	cpc	r25, r1
 216:	59 f1       	breq	.+86     	; 0x26e <My_TIM_Start+0x76>
 218:	89 2b       	or	r24, r25
 21a:	09 f0       	breq	.+2      	; 0x21e <My_TIM_Start+0x26>
			TCCR2B &= 0xF8;
			TCCR2B |= prescailer_value;
		break;
		
		default:
		break;
 21c:	3c c0       	rjmp	.+120    	; 0x296 <My_TIM_Start+0x9e>
void My_TIM_Start(uint8_t tim_name, uint8_t prescailer_value)
{
	switch (tim_name)
	{
		case TIM0:
			TCCR0B &= 0xF8;
 21e:	85 e4       	ldi	r24, 0x45	; 69
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	25 e4       	ldi	r18, 0x45	; 69
 224:	30 e0       	ldi	r19, 0x00	; 0
 226:	f9 01       	movw	r30, r18
 228:	20 81       	ld	r18, Z
 22a:	28 7f       	andi	r18, 0xF8	; 248
 22c:	fc 01       	movw	r30, r24
 22e:	20 83       	st	Z, r18
			TCCR0B |= prescailer_value;
 230:	85 e4       	ldi	r24, 0x45	; 69
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	25 e4       	ldi	r18, 0x45	; 69
 236:	30 e0       	ldi	r19, 0x00	; 0
 238:	f9 01       	movw	r30, r18
 23a:	30 81       	ld	r19, Z
 23c:	2a 81       	ldd	r18, Y+2	; 0x02
 23e:	23 2b       	or	r18, r19
 240:	fc 01       	movw	r30, r24
 242:	20 83       	st	Z, r18
		break;
 244:	28 c0       	rjmp	.+80     	; 0x296 <My_TIM_Start+0x9e>
		
		case TIM1:
			TCCR1B &= 0xF8;
 246:	81 e8       	ldi	r24, 0x81	; 129
 248:	90 e0       	ldi	r25, 0x00	; 0
 24a:	21 e8       	ldi	r18, 0x81	; 129
 24c:	30 e0       	ldi	r19, 0x00	; 0
 24e:	f9 01       	movw	r30, r18
 250:	20 81       	ld	r18, Z
 252:	28 7f       	andi	r18, 0xF8	; 248
 254:	fc 01       	movw	r30, r24
 256:	20 83       	st	Z, r18
			TCCR1B |= prescailer_value;
 258:	81 e8       	ldi	r24, 0x81	; 129
 25a:	90 e0       	ldi	r25, 0x00	; 0
 25c:	21 e8       	ldi	r18, 0x81	; 129
 25e:	30 e0       	ldi	r19, 0x00	; 0
 260:	f9 01       	movw	r30, r18
 262:	30 81       	ld	r19, Z
 264:	2a 81       	ldd	r18, Y+2	; 0x02
 266:	23 2b       	or	r18, r19
 268:	fc 01       	movw	r30, r24
 26a:	20 83       	st	Z, r18
		break;
 26c:	14 c0       	rjmp	.+40     	; 0x296 <My_TIM_Start+0x9e>
		
		case TIM2:
			TCCR2B &= 0xF8;
 26e:	81 eb       	ldi	r24, 0xB1	; 177
 270:	90 e0       	ldi	r25, 0x00	; 0
 272:	21 eb       	ldi	r18, 0xB1	; 177
 274:	30 e0       	ldi	r19, 0x00	; 0
 276:	f9 01       	movw	r30, r18
 278:	20 81       	ld	r18, Z
 27a:	28 7f       	andi	r18, 0xF8	; 248
 27c:	fc 01       	movw	r30, r24
 27e:	20 83       	st	Z, r18
			TCCR2B |= prescailer_value;
 280:	81 eb       	ldi	r24, 0xB1	; 177
 282:	90 e0       	ldi	r25, 0x00	; 0
 284:	21 eb       	ldi	r18, 0xB1	; 177
 286:	30 e0       	ldi	r19, 0x00	; 0
 288:	f9 01       	movw	r30, r18
 28a:	30 81       	ld	r19, Z
 28c:	2a 81       	ldd	r18, Y+2	; 0x02
 28e:	23 2b       	or	r18, r19
 290:	fc 01       	movw	r30, r24
 292:	20 83       	st	Z, r18
		break;
 294:	00 00       	nop
		
		default:
		break;
	}
}
 296:	00 00       	nop
 298:	0f 90       	pop	r0
 29a:	0f 90       	pop	r0
 29c:	df 91       	pop	r29
 29e:	cf 91       	pop	r28
 2a0:	08 95       	ret

000002a2 <My_Init_USART>:
 2a2:	cf 93       	push	r28
 2a4:	df 93       	push	r29
 2a6:	cd b7       	in	r28, 0x3d	; 61
 2a8:	de b7       	in	r29, 0x3e	; 62
 2aa:	84 ec       	ldi	r24, 0xC4	; 196
 2ac:	90 e0       	ldi	r25, 0x00	; 0
 2ae:	27 e6       	ldi	r18, 0x67	; 103
 2b0:	30 e0       	ldi	r19, 0x00	; 0
 2b2:	fc 01       	movw	r30, r24
 2b4:	31 83       	std	Z+1, r19	; 0x01
 2b6:	20 83       	st	Z, r18
 2b8:	81 ec       	ldi	r24, 0xC1	; 193
 2ba:	90 e0       	ldi	r25, 0x00	; 0
 2bc:	28 e9       	ldi	r18, 0x98	; 152
 2be:	fc 01       	movw	r30, r24
 2c0:	20 83       	st	Z, r18
 2c2:	82 ec       	ldi	r24, 0xC2	; 194
 2c4:	90 e0       	ldi	r25, 0x00	; 0
 2c6:	26 e0       	ldi	r18, 0x06	; 6
 2c8:	fc 01       	movw	r30, r24
 2ca:	20 83       	st	Z, r18
 2cc:	00 00       	nop
 2ce:	df 91       	pop	r29
 2d0:	cf 91       	pop	r28
 2d2:	08 95       	ret

000002d4 <My_USART0_ReciveByte>:
 2d4:	cf 93       	push	r28
 2d6:	df 93       	push	r29
 2d8:	1f 92       	push	r1
 2da:	cd b7       	in	r28, 0x3d	; 61
 2dc:	de b7       	in	r29, 0x3e	; 62
 2de:	86 ec       	ldi	r24, 0xC6	; 198
 2e0:	90 e0       	ldi	r25, 0x00	; 0
 2e2:	fc 01       	movw	r30, r24
 2e4:	80 81       	ld	r24, Z
 2e6:	89 83       	std	Y+1, r24	; 0x01
 2e8:	89 81       	ldd	r24, Y+1	; 0x01
 2ea:	0f 90       	pop	r0
 2ec:	df 91       	pop	r29
 2ee:	cf 91       	pop	r28
 2f0:	08 95       	ret

000002f2 <My_USART0_CheckString>:
 2f2:	cf 93       	push	r28
 2f4:	df 93       	push	r29
 2f6:	00 d0       	rcall	.+0      	; 0x2f8 <My_USART0_CheckString+0x6>
 2f8:	1f 92       	push	r1
 2fa:	cd b7       	in	r28, 0x3d	; 61
 2fc:	de b7       	in	r29, 0x3e	; 62
 2fe:	89 83       	std	Y+1, r24	; 0x01
 300:	6a 83       	std	Y+2, r22	; 0x02
 302:	4b 83       	std	Y+3, r20	; 0x03
 304:	8a 81       	ldd	r24, Y+2	; 0x02
 306:	88 23       	and	r24, r24
 308:	31 f4       	brne	.+12     	; 0x316 <My_USART0_CheckString+0x24>
 30a:	89 81       	ldd	r24, Y+1	; 0x01
 30c:	8c 33       	cpi	r24, 0x3C	; 60
 30e:	19 f4       	brne	.+6      	; 0x316 <My_USART0_CheckString+0x24>
 310:	81 e0       	ldi	r24, 0x01	; 1
 312:	90 e0       	ldi	r25, 0x00	; 0
 314:	02 c0       	rjmp	.+4      	; 0x31a <My_USART0_CheckString+0x28>
 316:	80 e0       	ldi	r24, 0x00	; 0
 318:	90 e0       	ldi	r25, 0x00	; 0
 31a:	0f 90       	pop	r0
 31c:	0f 90       	pop	r0
 31e:	0f 90       	pop	r0
 320:	df 91       	pop	r29
 322:	cf 91       	pop	r28
 324:	08 95       	ret

00000326 <My_USART0_ReciveString>:
 326:	0f 93       	push	r16
 328:	1f 93       	push	r17
 32a:	cf 93       	push	r28
 32c:	df 93       	push	r29
 32e:	00 d0       	rcall	.+0      	; 0x330 <My_USART0_ReciveString+0xa>
 330:	1f 92       	push	r1
 332:	cd b7       	in	r28, 0x3d	; 61
 334:	de b7       	in	r29, 0x3e	; 62
 336:	9a 83       	std	Y+2, r25	; 0x02
 338:	89 83       	std	Y+1, r24	; 0x01
 33a:	6b 83       	std	Y+3, r22	; 0x03
 33c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <i.1628>
 340:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <i.1628+0x1>
 344:	9c 01       	movw	r18, r24
 346:	89 81       	ldd	r24, Y+1	; 0x01
 348:	9a 81       	ldd	r25, Y+2	; 0x02
 34a:	8c 01       	movw	r16, r24
 34c:	02 0f       	add	r16, r18
 34e:	13 1f       	adc	r17, r19
 350:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <My_USART0_ReciveByte>
 354:	f8 01       	movw	r30, r16
 356:	80 83       	st	Z, r24
 358:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <i.1628>
 35c:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <i.1628+0x1>
 360:	89 2b       	or	r24, r25
 362:	c9 f4       	brne	.+50     	; 0x396 <My_USART0_ReciveString+0x70>
 364:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <i.1628>
 368:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <i.1628+0x1>
 36c:	28 2f       	mov	r18, r24
 36e:	89 81       	ldd	r24, Y+1	; 0x01
 370:	9a 81       	ldd	r25, Y+2	; 0x02
 372:	fc 01       	movw	r30, r24
 374:	80 81       	ld	r24, Z
 376:	4b 81       	ldd	r20, Y+3	; 0x03
 378:	62 2f       	mov	r22, r18
 37a:	0e 94 79 01 	call	0x2f2	; 0x2f2 <My_USART0_CheckString>
 37e:	01 97       	sbiw	r24, 0x01	; 1
 380:	99 f4       	brne	.+38     	; 0x3a8 <My_USART0_ReciveString+0x82>
 382:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <i.1628>
 386:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <i.1628+0x1>
 38a:	01 96       	adiw	r24, 0x01	; 1
 38c:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <i.1628+0x1>
 390:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <i.1628>
 394:	09 c0       	rjmp	.+18     	; 0x3a8 <My_USART0_ReciveString+0x82>
 396:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <i.1628>
 39a:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <i.1628+0x1>
 39e:	01 96       	adiw	r24, 0x01	; 1
 3a0:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <i.1628+0x1>
 3a4:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <i.1628>
 3a8:	8b 81       	ldd	r24, Y+3	; 0x03
 3aa:	88 2f       	mov	r24, r24
 3ac:	90 e0       	ldi	r25, 0x00	; 0
 3ae:	9c 01       	movw	r18, r24
 3b0:	21 50       	subi	r18, 0x01	; 1
 3b2:	31 09       	sbc	r19, r1
 3b4:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <i.1628>
 3b8:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <i.1628+0x1>
 3bc:	28 17       	cp	r18, r24
 3be:	39 07       	cpc	r19, r25
 3c0:	c9 f4       	brne	.+50     	; 0x3f4 <My_USART0_ReciveString+0xce>
 3c2:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <i.1628>
 3c6:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <i.1628+0x1>
 3ca:	58 2f       	mov	r21, r24
 3cc:	8b 81       	ldd	r24, Y+3	; 0x03
 3ce:	88 2f       	mov	r24, r24
 3d0:	90 e0       	ldi	r25, 0x00	; 0
 3d2:	01 97       	sbiw	r24, 0x01	; 1
 3d4:	29 81       	ldd	r18, Y+1	; 0x01
 3d6:	3a 81       	ldd	r19, Y+2	; 0x02
 3d8:	82 0f       	add	r24, r18
 3da:	93 1f       	adc	r25, r19
 3dc:	fc 01       	movw	r30, r24
 3de:	80 81       	ld	r24, Z
 3e0:	4b 81       	ldd	r20, Y+3	; 0x03
 3e2:	65 2f       	mov	r22, r21
 3e4:	0e 94 79 01 	call	0x2f2	; 0x2f2 <My_USART0_CheckString>
 3e8:	01 97       	sbiw	r24, 0x01	; 1
 3ea:	21 f4       	brne	.+8      	; 0x3f4 <My_USART0_ReciveString+0xce>
 3ec:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <i.1628+0x1>
 3f0:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <i.1628>
 3f4:	00 00       	nop
 3f6:	0f 90       	pop	r0
 3f8:	0f 90       	pop	r0
 3fa:	0f 90       	pop	r0
 3fc:	df 91       	pop	r29
 3fe:	cf 91       	pop	r28
 400:	1f 91       	pop	r17
 402:	0f 91       	pop	r16
 404:	08 95       	ret

00000406 <_exit>:
 406:	f8 94       	cli

00000408 <__stop_program>:
 408:	ff cf       	rjmp	.-2      	; 0x408 <__stop_program>
