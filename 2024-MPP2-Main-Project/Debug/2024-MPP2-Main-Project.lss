
2024-MPP2-Main-Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  000001a8  0000021c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001a8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000021e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000250  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000a0  00000000  00000000  00000290  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000098e  00000000  00000000  00000330  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007f2  00000000  00000000  00000cbe  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004d8  00000000  00000000  000014b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000134  00000000  00000000  00001988  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000477  00000000  00000000  00001abc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001fc  00000000  00000000  00001f33  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000070  00000000  00000000  0000212f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__vector_11>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 ea       	ldi	r30, 0xA8	; 168
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 4b 00 	call	0x96	; 0x96 <main>
  8e:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <main>:
#include "main.h"
#include "avr/interrupt.h"

int main(void)
{
	DDRB |= (1 << DDB5);
  96:	84 b1       	in	r24, 0x04	; 4
  98:	80 62       	ori	r24, 0x20	; 32
  9a:	84 b9       	out	0x04, r24	; 4
	
	My_Init_TIM1();
  9c:	0e 94 8c 00 	call	0x118	; 0x118 <My_Init_TIM1>
    My_TIM_Start(TIM1,TIM1_PRESCALER_FACTOR_1024);
  a0:	65 e0       	ldi	r22, 0x05	; 5
  a2:	81 e0       	ldi	r24, 0x01	; 1
  a4:	0e 94 a1 00 	call	0x142	; 0x142 <My_TIM_Start>
	
	My_Init_USART();
  a8:	0e 94 c0 00 	call	0x180	; 0x180 <My_Init_USART>
	
	
	sei();
  ac:	78 94       	sei
  ae:	ff cf       	rjmp	.-2      	; 0xae <main+0x18>

000000b0 <__vector_11>:
	
    }
}

ISR(TIMER1_COMPA_vect)
{
  b0:	1f 92       	push	r1
  b2:	0f 92       	push	r0
  b4:	0f b6       	in	r0, 0x3f	; 63
  b6:	0f 92       	push	r0
  b8:	11 24       	eor	r1, r1
  ba:	2f 93       	push	r18
  bc:	3f 93       	push	r19
  be:	4f 93       	push	r20
  c0:	5f 93       	push	r21
  c2:	6f 93       	push	r22
  c4:	7f 93       	push	r23
  c6:	8f 93       	push	r24
  c8:	9f 93       	push	r25
  ca:	af 93       	push	r26
  cc:	bf 93       	push	r27
  ce:	ef 93       	push	r30
  d0:	ff 93       	push	r31
	
	static uint8_t data = 0x41;
	data++;
  d2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
  d6:	8f 5f       	subi	r24, 0xFF	; 255
  d8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
	if(data == 0x5B) {
  dc:	8b 35       	cpi	r24, 0x5B	; 91
  de:	19 f4       	brne	.+6      	; 0xe6 <__vector_11+0x36>
		data = 0x41;
  e0:	81 e4       	ldi	r24, 0x41	; 65
  e2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
	}
	uint8_t data_to_send = data;

	
	My_USART0_TransmitByte(data_to_send);
  e6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
  ea:	0e 94 cd 00 	call	0x19a	; 0x19a <My_USART0_TransmitByte>
	PORTB ^= (1 << PORTB5);
  ee:	95 b1       	in	r25, 0x05	; 5
  f0:	80 e2       	ldi	r24, 0x20	; 32
  f2:	89 27       	eor	r24, r25
  f4:	85 b9       	out	0x05, r24	; 5
  f6:	ff 91       	pop	r31
  f8:	ef 91       	pop	r30
  fa:	bf 91       	pop	r27
  fc:	af 91       	pop	r26
  fe:	9f 91       	pop	r25
 100:	8f 91       	pop	r24
 102:	7f 91       	pop	r23
 104:	6f 91       	pop	r22
 106:	5f 91       	pop	r21
 108:	4f 91       	pop	r20
 10a:	3f 91       	pop	r19
 10c:	2f 91       	pop	r18
 10e:	0f 90       	pop	r0
 110:	0f be       	out	0x3f, r0	; 63
 112:	0f 90       	pop	r0
 114:	1f 90       	pop	r1
 116:	18 95       	reti

00000118 <My_Init_TIM1>:
/**------------------------------------------------------------------
 * @brief Funkcija nodrošina taimera/skaitit?tja TIM2 darb?bas rež?mu
 * TIM2 izmanto hronomemetra un funkcionalit?tes nodrošin?šanai
*/
void My_Init_TIM2()
{
 118:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 11c:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
 120:	89 e0       	ldi	r24, 0x09	; 9
 122:	9d e3       	ldi	r25, 0x3D	; 61
 124:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 128:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 12c:	e1 e8       	ldi	r30, 0x81	; 129
 12e:	f0 e0       	ldi	r31, 0x00	; 0
 130:	80 81       	ld	r24, Z
 132:	88 60       	ori	r24, 0x08	; 8
 134:	80 83       	st	Z, r24
 136:	ef e6       	ldi	r30, 0x6F	; 111
 138:	f0 e0       	ldi	r31, 0x00	; 0
 13a:	80 81       	ld	r24, Z
 13c:	82 60       	ori	r24, 0x02	; 2
 13e:	80 83       	st	Z, r24
 140:	08 95       	ret

00000142 <My_TIM_Start>:
 * @param tim_name			taimera skaitit?ja nosaukums
 * @param prescailer_value  Dalit?ja 
*/
void My_TIM_Start(uint8_t tim_name, uint8_t prescailer_value)
{
	switch (tim_name)
 142:	81 30       	cpi	r24, 0x01	; 1
 144:	59 f0       	breq	.+22     	; 0x15c <My_TIM_Start+0x1a>
 146:	18 f0       	brcs	.+6      	; 0x14e <My_TIM_Start+0xc>
 148:	82 30       	cpi	r24, 0x02	; 2
 14a:	89 f0       	breq	.+34     	; 0x16e <My_TIM_Start+0x2c>
 14c:	08 95       	ret
	{
		case TIM0:
			TCCR0B &= 0xF8;
 14e:	85 b5       	in	r24, 0x25	; 37
 150:	88 7f       	andi	r24, 0xF8	; 248
 152:	85 bd       	out	0x25, r24	; 37
			TCCR0B |= prescailer_value;
 154:	85 b5       	in	r24, 0x25	; 37
 156:	68 2b       	or	r22, r24
 158:	65 bd       	out	0x25, r22	; 37
		break;
 15a:	08 95       	ret
		
		case TIM1:
			TCCR1B &= 0xF8;
 15c:	e1 e8       	ldi	r30, 0x81	; 129
 15e:	f0 e0       	ldi	r31, 0x00	; 0
 160:	80 81       	ld	r24, Z
 162:	88 7f       	andi	r24, 0xF8	; 248
 164:	80 83       	st	Z, r24
			TCCR1B |= prescailer_value;
 166:	80 81       	ld	r24, Z
 168:	68 2b       	or	r22, r24
 16a:	60 83       	st	Z, r22
		break;
 16c:	08 95       	ret
		
		case TIM2:
			TCCR2B &= 0xF8;
 16e:	e1 eb       	ldi	r30, 0xB1	; 177
 170:	f0 e0       	ldi	r31, 0x00	; 0
 172:	80 81       	ld	r24, Z
 174:	88 7f       	andi	r24, 0xF8	; 248
 176:	80 83       	st	Z, r24
			TCCR2B |= prescailer_value;
 178:	80 81       	ld	r24, Z
 17a:	68 2b       	or	r22, r24
 17c:	60 83       	st	Z, r22
 17e:	08 95       	ret

00000180 <My_Init_USART>:
#include "atmega328p_USART.h"

void My_Init_USART()
{
	// Iestate simbolu p?rs?ta ?trumu 9600 baud
	UBRR0 = 103; 
 180:	87 e6       	ldi	r24, 0x67	; 103
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 188:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	
	// RXEN0 - en uztver?šanas da?u
	// TXEN - en raid?šanas da?u
	// RXCIE - en RX p?rtraukumu 
	UCSR0B = (1 << RXEN0) | (1 << TXEN0) | ( 1 << RXCIE0);
 18c:	88 e9       	ldi	r24, 0x98	; 152
 18e:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
 192:	86 e0       	ldi	r24, 0x06	; 6
 194:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 198:	08 95       	ret

0000019a <My_USART0_TransmitByte>:
}

void My_USART0_TransmitByte(uint8_t symbol)
{
	// if transmitter buffer !empty -> write data in symbol
	while(!(UCSR0A) & (1 << UDRE0));
 19a:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
	UDR0 = symbol;
 19e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 1a2:	08 95       	ret

000001a4 <_exit>:
 1a4:	f8 94       	cli

000001a6 <__stop_program>:
 1a6:	ff cf       	rjmp	.-2      	; 0x1a6 <__stop_program>
